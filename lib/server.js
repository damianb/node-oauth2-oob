// Generated by CoffeeScript 1.6.2
var Application, Server, async, authCodeBytes, tokenBytes, utils;

async = require('async');

utils = require('./utils');

Application = require('./application');

tokenBytes = 64;

authCodeBytes = 20;

Server = (function() {
  function Server(storage, options) {
    this.storage = storage;
    this.tokenDuration = options.tokenDuration, this.authCodeDuration = options.authCodeDuration;
    if (!this.tokenDuration) {
      this.tokenDuration = 1000 * 60 * 60 * 24;
    }
    if (!this.authCodeDuration) {
      this.authCodeDuration = 1000 * 60 * 5;
    }
  }

  Server.prototype.newApp = function(options, fn) {
    if (arguments.length === 2) {
      return fn(null, new Application(this, options));
    } else {
      return new Application(this, options);
    }
  };

  Server.prototype.dropApp = function(app, fn) {
    if (!(app instanceof Application)) {
      throw new Error('OAuth2-OOB.Server.dropApp expects an OAuth2-OOB.Application instance as a parameter, none provided');
    }
    return async.parallel([
      function(cb) {
        return app.drop(cb);
      }, function(cb) {
        return this.storage.drop('token', {
          appId: app.appId
        }, cb);
      }
    ], fn);
  };

  Server.prototype.getApp = function(appId, fn) {
    var _this = this;

    return this.storage.get('application', {
      appId: appId
    }, function(err, data) {
      if (err) {
        return fn(err);
      }
      return fn(null, _this.newApp(data));
    });
  };

  Server.prototype.getAppByRefresh = function(token, fn) {
    return this._getAppBy({
      refreshToken: token
    }, fn);
  };

  Server.prototype.getAppByAccess = function(token, fn) {
    return this._getAppBy({
      accessToken: token
    }, fn);
  };

  Server.prototype._getAppBy = function(params, fn) {
    var _this = this;

    return this.storage.get('token', params, function(err, tokenEntry) {
      if (err) {
        return fn(err);
      }
      return _this.getApp(tokenEntry.appId, fn);
    });
  };

  Server.prototype.getAuthCode = function(app, userId, fn) {
    var _this = this;

    return utils.randString(authCodeBytes, function(err, code) {
      return _this.storage.add('authCode', {
        appId: app.appId,
        userId: userId,
        code: code,
        expiry: Date.now() + _this.authCodeDuration
      }, fn);
    });
  };

  Server.prototype.getTokens = function(app, authCode, fn) {
    return this.storage.get('authCode', {
      appId: app.appId,
      code: code
    }, function(err, authCode) {
      var _this = this;

      if (err) {
        return fn(err);
      }
      if (authCode == null) {
        return fn('no such auth code');
      }
      if (Date.now() > authCode.expiry) {
        this.storage.drop('authCode', {
          appId: app.appId,
          code: code
        }, function(err) {
          if (err) {
            return fn(err);
          }
          return fn('auth code expired');
        });
      }
      return this.storage.drop('authCode', {
        appId: app.appId,
        code: code
      }, function(err) {
        if (err) {
          return fn(err);
        }
        return _this._genTokens(function(tokens) {
          return _this.storage.add('token', {
            appId: app.appId,
            scope: app.scope,
            refreshToken: tokens.refreshToken,
            accessToken: tokens.accessToken,
            expiry: Date.now() + _this.tokenDuration
          }, fn);
        });
      });
    });
  };

  Server.prototype.refreshTokens = function(app, appSecret, refresh, fn) {
    var _this = this;

    if (appSecret !== app.appSecret) {
      return fn('refresh authentication failure');
    }
    return this.storage.get('token', {
      appId: app.appId,
      refreshToken: refresh
    }, function(err, refreshToken) {
      if (err) {
        return fn(err);
      }
      if (!refreshToken) {
        return fn('no such token');
      }
      return _this.storage.drop('token', {
        appId: app.appId,
        refreshToken: refresh
      }, function(err) {
        var _this = this;

        if (err) {
          return fn(err);
        }
        return this._genTokens(function(tokens) {
          return _this.storage.add('token', {
            appId: app.appId,
            scope: app.scope,
            refreshToken: tokens.refreshToken,
            accessToken: tokens.accessToken,
            expiry: Date.now() + _this.tokenDuration
          }, fn);
        });
      });
    });
  };

  Server.prototype.checkAccess = function(token, fn) {
    return this.storage.get('token', {
      accessToken: token
    }, function(err, accessToken) {
      if (err) {
        return fn(err);
      }
      if (accessToken == null) {
        return fn('no such token');
      }
      if (Date.now > accessToken.expiry) {
        this.storage.drop('token', {
          accessToken: token
        }, function(err) {
          if (err) {
            return fn(err);
          }
          return fn('token expired');
        });
      }
      return fn(null, true, accessToken);
    });
  };

  Server.prototype._genTokens = function(fn) {
    return async.parallel({
      refreshToken: function(cb) {
        return utils.randString(tokenBytes, cb);
      },
      accessToken: function(cb) {
        return utils.randString(tokenBytes, cb);
      }
    }, fn);
  };

  return Server;

})();

module.exports = Server;
